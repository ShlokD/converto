{"version":3,"sources":["src/js/classes/csv.js","src/js/classes/controller.js","src/js/app.js"],"names":["input","process","isAString","entries","split","headers","data","slice","map","entry","elem","filter","length","trim","match","i","isNotEmpty","isValidCSV","output","outry","j","push","JSON","stringify","inputTextArea","document","querySelector","convertButton","warningsMessageContainer","uploadCSV","csv","CSV","reader","FileReader","handleConversion","bind","handleUpload","handleFileLoad","onload","warnMessage","textContent","outputStr","text","setInput","checkValidity","setWarning","setOutput","toJSON","ev","target","result","printJSON","preventDefault","value","file","files","readAsText","addEventListener","init","Controller","window"],"mappings":"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","file":"app.60d3f5f3.js","sourceRoot":"..","sourcesContent":["export default class {\r\n  constructor(input = '') {\r\n    this.input = input\r\n    this.process();\r\n  }\r\n\r\n  process() {\r\n    if(this.isAString()) {\r\n      const entries = this.input.split(/\\r|\\n/)\r\n      this.headers = entries[0].split(',');\r\n      this.data = entries\r\n      .slice(1)\r\n      .map(\r\n        entry => entry.split(',').map(elem => elem || \"\") // set empty entries to empty string\r\n      ).filter(entry => entry.length === this.headers.length) // remove all singular arrays\r\n    }\r\n  }\r\n\r\n  setInput(input) {\r\n    this.input = input\r\n    this.process();\r\n  }\r\n\r\n  isAString() {\r\n    return typeof this.input === \"string\"\r\n  }\r\n\r\n  isNotEmpty() {\r\n    return this.input.trim().length > 0\r\n  }\r\n\r\n  isValidCSV() {\r\n    const hasCommas = !!this.input.match(',');\r\n    if (!hasCommas) return false;\r\n\r\n    if(this.data.length === 0) return false;\r\n\r\n    for (let i = 0; i < this.data.length; ++i) {\r\n      if (this.data[i].length !== this.headers.length) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  checkValidity() {\r\n    return this.isAString() && this.isNotEmpty() && this.isValidCSV()\r\n  }\r\n\r\n  toJSON() {\r\n    const output = []\r\n    for (let i = 0; i < this.data.length; ++i) {\r\n      const outry = {}\r\n      for (let j = 0; j < this.headers.length; ++j) {\r\n        outry[this.headers[j]] = this.data[i][j]\r\n      }\r\n      output.push(outry);\r\n    }\r\n    return JSON.stringify(output);\r\n  }\r\n}","import CSV from './csv.js';\r\n\r\nexport default class {\r\n  constructor() {\r\n    this.inputTextArea = document.querySelector(\"#csv-input\");\r\n    this.output = document.querySelector(\"#output\");\r\n    this.convertButton = document.querySelector(\"#convert\");\r\n    this.warningsMessageContainer = document.querySelector(\"#warning\")\r\n    this.uploadCSV = document.querySelector(\"#csv-upload\");\r\n\r\n    this.csv =  new CSV();\r\n    this.reader = new FileReader();\r\n\r\n\r\n    this.handleConversion = this.handleConversion.bind(this);\r\n    this.handleUpload = this.handleUpload.bind(this);\r\n    this.handleFileLoad = this.handleFileLoad.bind(this);\r\n\r\n\r\n    this.reader.onload = this.handleFileLoad;\r\n\r\n  }\r\n\r\n  setWarning(warnMessage) {\r\n    this.warningsMessageContainer.textContent = warnMessage;\r\n  }\r\n\r\n  setOutput(outputStr) {\r\n    this.output.textContent = outputStr;\r\n  }\r\n\r\n  printJSON(text) {\r\n    this.csv.setInput(text);\r\n    const isValid = this.csv.checkValidity();\r\n    if(isValid) {\r\n      this.setWarning('')\r\n      this.setOutput(this.csv.toJSON())\r\n    } else {\r\n      this.setWarning('Incorrect CSV');\r\n    }\r\n  }\r\n\r\n  handleFileLoad(ev) {\r\n    const text = ev.target.result;\r\n    this.printJSON(text);\r\n  }\r\n\r\n  handleConversion(ev) {\r\n    ev.preventDefault();\r\n    const text = this.inputTextArea.value\r\n    this.printJSON(text);\r\n  }\r\n\r\n  handleUpload(ev) {\r\n    const file = ev.target.files[0];\r\n    if(file) {\r\n      this.reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.convertButton.addEventListener('click', this.handleConversion)\r\n    this.uploadCSV.addEventListener(\"change\", this.handleUpload, false);\r\n  }\r\n}","import Controller from './classes/controller.js'\r\n\r\nconst init = () => {\r\n  const controller = new Controller();\r\n  controller.init();\r\n}\r\nwindow.addEventListener('load', init);"]}